direct hashing:
    we make a table as big as the universe of keys and use the object
directly as the key

disadvantage: unreasonable memory allocation when the universe of keys
    is big. 
advantage: quick, easy, O(1) worst case scenario INSERT/SEARCH/DELETE
    operations

THE THING ABOUT SMALL NUMBERS OF KEYS
When your table is holding unreasonably large amounts of memory for 
a few small keys that are actually going to be used, a lot of
memory ends up going to waste. It is for this reason that we employ
hash functions, h:U->{0,1,...,m - 1}, that map the universe of all
possible keys into indices that we will use to determine the slots
of the hash table T[0,1,...,m -1 ]. Note that since m - 1 is smaller
than U, no bijection exists that maps U -> {0,1,...,m - 1]. Thus,
there will be collisions in which two or more keys, k1, k2 map to the
same value from the hash function:
h(k1) = h(k2). We call these collisions and we are fortunate enough 
that there exists many ways to deal with collisions.

Ways to Deal With Collisions:
1. Collision resolution by chaining.

In chaining, we put all the elements that has to the same slot in a linked
list. Pseudocode: 

Chained-Hash_Insert(T, x):
    insert x at the head of list T[h(keys[x])]
Chained-Hash-Search(T, k):
    search for an element with key k in list T[h(k)]
Chained-Hash-Delete(T, x):
    delete x from the list T[h(key[x])]

Analysis:
Performs pretty badly. Insertion is O(1), but search and delete
are both O(n).
Actually, we can make deletion O(1) by storing them the objects
in a doubly-linked list, thus we don't have to search for the key
within the table

- Simple uniform hashing is the assumption that the hash function
distributes the keys across the table evenly and independently
to where any other element has hashed to.
